// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartBooks.Persitence.Data.Context;

namespace SmartBooks.Persitence.Migrations
{
    [DbContext(typeof(SmartBooksContext))]
    [Migration("20210302130755_MultipleAccounts")]
    partial class MultipleAccounts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PoBox")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Address");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ContentDisposition")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContentType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Extension")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RootPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SystemFileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<int>("RecordType")
                        .HasColumnType("int");

                    b.Property<string>("SerializedRecord")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BankCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("BankName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.BankBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("BranchName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankBranches");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Bin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Bins");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.BinCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("BinId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BinId");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("BinCards");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Category");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<int>("CompanyType")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PoBox")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Town")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.CompanyDefaults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllowPostingToParentAccount")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentFinancialYear")
                        .HasColumnType("int");

                    b.Property<int>("DefaultCodeLength")
                        .HasColumnType("int");

                    b.Property<int>("DefaultCurrency")
                        .HasColumnType("int");

                    b.Property<int>("DefaultWarehouse")
                        .HasColumnType("int");

                    b.Property<bool>("EnableInventoryTracking")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasMultipleWarehouses")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.Property<bool>("UseAccountNumbers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseFinancialYear")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("CompanyDefaults");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DecimalMark")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ISOCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<int>("NumericCode")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("SubUnit")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SubUnitToUnit")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("SymbolFirst")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ThousandSeparator")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.CurrencyConversion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Rate")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyConversions");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.CustomerProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerProjects");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.DocumentSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AutoGenerateReference")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LevelOneTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LevelThreeTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LevelTwoTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("NextReferenceNo")
                        .HasColumnType("int");

                    b.Property<bool>("PrintLevelOne")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PrintLevelThree")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PrintLevelTwo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ReferenceLength")
                        .HasColumnType("int");

                    b.Property<string>("ReferencePrefix")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("RequireLevelOne")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RequireLevelThree")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RequireLevelTwo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DocumentSettings");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.FinancialYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Closed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ClosingJournalId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("OpeningJournalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.Property<string>("YearTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ClosingJournalId");

                    b.HasIndex("OpeningJournalId");

                    b.ToTable("FinancialYears");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.GeneralLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("JournalDetailId")
                        .HasColumnType("int");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<int>("LedgerAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TransactionDetailId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalDetailId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LedgerAccountId");

                    b.HasIndex("TransactionDetailId");

                    b.ToTable("GeneralLedgers");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.InventoryLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("BalanceBF")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("BinCardId")
                        .HasColumnType("int");

                    b.Property<int?>("BinCardId1")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CostBF")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("NewCost")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("SourceDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("SourceDocumentReference")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<byte>("SourceDocumentType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("UnitofMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BinCardId");

                    b.HasIndex("BinCardId1");

                    b.HasIndex("UnitofMeasureId");

                    b.ToTable("InventoryLedgers");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("CreditSubTotal")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CreditTotal")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CreditTotalTax")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("DebitSubTotal")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DebitTotal")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DebitTotalTax")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ExchangeRate")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Memo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.JournalDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BusinessUnitId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Credit")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Debit")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<int>("LedgerAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Memo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int?>("SubLedgerId")
                        .HasColumnType("int");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("TaxRateId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LedgerAccountId");

                    b.HasIndex("SubLedgerId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("TransactionDetailId");

                    b.HasIndex("TransactionId");

                    b.ToTable("JournalDetails");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.LedgerAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<bool>("AddToDashboard")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("BankAccountNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("CurrencyBalance")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DetailAccountType")
                        .HasColumnType("int");

                    b.Property<bool>("HasOverDraft")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("Height")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("OverDraftLimit")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowInPettyCash")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TaxRateId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ParentAccountId");

                    b.HasIndex("TaxRateId");

                    b.ToTable("LedgerAccounts");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.LedgerEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("int");

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("JournalDetailId")
                        .HasColumnType("int");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<bool>("Posted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("JournalDetailId");

                    b.HasIndex("JournalId");

                    b.ToTable("LedgerEntries");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LedgerAccountId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodType")
                        .HasColumnType("int");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LedgerAccountId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.PaymentTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("DateDriven")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<int>("DiscountIfPaidBefore")
                        .HasColumnType("int");

                    b.Property<int>("DiscountIfPaidWithin")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("DueNextMonthIfIssued")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NetDueBefore")
                        .HasColumnType("int");

                    b.Property<int>("NetDueIn")
                        .HasColumnType("int");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerms");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.ReorderLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BinId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("GlobalBased")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("ReorderPoint")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("SafetyStock")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UnitofMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BinId");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("UnitofMeasureId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ReorderLevels");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.SubLedgerBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("CurrencyBalance")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<int?>("LedgerAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<string>("PIN")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LedgerAccountId");

                    b.ToTable("SubLedgerBases");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SubLedgerBase");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("PurchasesAccountId")
                        .HasColumnType("int");

                    b.Property<int>("ReportingMethod")
                        .HasColumnType("int");

                    b.Property<int?>("SalesAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TaxAgencyId")
                        .HasColumnType("int");

                    b.Property<string>("TaxRegistrationNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchasesAccountId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("TaxAgencyId");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.TaxRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PurchaseRate")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("PurchaseTaxIsReclaimable")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("SalesRate")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaxId");

                    b.ToTable("TaxRates");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DocumentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EmailMessage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EmailStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("JournalId")
                        .HasColumnType("int");

                    b.Property<int>("SubLedgerBaseId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("TaxTotal")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Transactions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transaction");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.TransactionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("InventoryItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionDetails");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.TransactionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TransactionItems");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TransactionItem");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.UnitofMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UnitofMeasures");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.UomConversion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<decimal>("Factor")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UnitofMeasureFromId")
                        .HasColumnType("int");

                    b.Property<int>("UnitofMeasureToId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitofMeasureFromId");

                    b.HasIndex("UnitofMeasureToId");

                    b.ToTable("UomConversions");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DefaultDespatchBin")
                        .HasColumnType("int");

                    b.Property<int>("DefaultReceivingBin")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.MemberApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalAction")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("MessageToMember")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberApprovals");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.MemberAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberAttachments");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.NextOfKin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CareOf")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Contacts")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMinor")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Relation")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("NextOfKins");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.SaccoSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MembershipFeeAccountTypeId")
                        .HasColumnType("int");

                    b.Property<int>("NextMemberNumber")
                        .HasColumnType("int");

                    b.Property<int>("SharesAccountTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SaccoSettings");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.ClassRegister", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassRoomId")
                        .HasColumnType("int");

                    b.Property<int>("ClassTeacherId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SchoolTermId")
                        .HasColumnType("int");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("ClassTeacherId");

                    b.HasIndex("SchoolTermId");

                    b.ToTable("ClassRegisters");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.ClassRegisterDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassRegisterId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassRegisterId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassRegisterDetails");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.ClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("LevelId");

                    b.ToTable("ClassRooms");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.Dormitory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Dormitories");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SchoolLevel")
                        .HasColumnType("int");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.SchoolTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("int");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("SchoolTerms");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.SchoolYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StopDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SchoolYears");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.TeachingDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("HoDId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TeachingDepartments");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.UtilityRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdateCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UtilityRooms");
                });

            modelBuilder.Entity("SmartBooks.Persitence.Data.Helpers.SimpleValue", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.ToTable("SingleValue");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.OrganisationAddress", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.Address");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasIndex("OrganisationId");

                    b.HasDiscriminator().HasValue("OrganisationAddress");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.BusinessUnit", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.Category");

                    b.HasDiscriminator().HasValue("BusinessUnit");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.CostCenter", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.Category");

                    b.HasDiscriminator().HasValue("CostCenter");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.CustomerType", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.Category");

                    b.HasDiscriminator().HasValue("CustomerType");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.InventoryCategory", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.Category");

                    b.HasDiscriminator().HasValue("InventoryCategory");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.SupplierType", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.Category");

                    b.HasDiscriminator().HasValue("SupplierType");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Employee", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.SubLedgerBase");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ItaxResidentialStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NhifNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NssfNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayslipPassword")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Organisation", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.SubLedgerBase");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditLimit")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("CreditLimitPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultAddressId")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationType")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<string>("VatNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DefaultAddressId");

                    b.HasIndex("PaymentTermId");

                    b.HasDiscriminator().HasValue("Organisation");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.Member", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.SubLedgerBase");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Member_Gender");

                    b.Property<int?>("HomeAddressId")
                        .HasColumnType("int");

                    b.Property<string>("IndentificationNo")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<int>("LearntAboutUs")
                        .HasColumnType("int");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("MemberNumber")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<int>("MemberStatus")
                        .HasColumnType("int");

                    b.Property<string>("NearestTown")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<string>("Occupation")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<int>("OccupationType")
                        .HasColumnType("int");

                    b.Property<int?>("PermanentAddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("Shared")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("SharesContribution")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("HomeAddressId");

                    b.HasIndex("PermanentAddressId");

                    b.HasDiscriminator().HasValue("Member");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.Student", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.SubLedgerBase");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GuardianContact")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GuardianName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("JoinedLevelId")
                        .HasColumnType("int");

                    b.Property<string>("PreviousSchool")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Relationship")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasIndex("JoinedLevelId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Invoice", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.Transaction");

                    b.Property<decimal>("AddedDebitAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CostofGoods")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ReturnedCreditAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("WithheldAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.HasDiscriminator().HasValue("Invoice");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.InventoryItem", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.TransactionItem");

                    b.Property<decimal>("Allocated")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("AssetAcount")
                        .HasColumnType("int");

                    b.Property<decimal>("AverageCost")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("BackOrdered")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("CogsAccount")
                        .HasColumnType("int");

                    b.Property<int?>("IncomeAccount")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("LastCost")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("OnHand")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("OnOrder")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("StandardCost")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("StandardPrice")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("TaxId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UnitofMeasureId")
                        .HasColumnType("int");

                    b.HasIndex("InventoryCategoryId");

                    b.HasIndex("UnitofMeasureId");

                    b.HasDiscriminator().HasValue("InventoryItem");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.MemberAccountType", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.TransactionItem");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("LedgerAccountId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentItemType")
                        .HasColumnType("int");

                    b.HasIndex("LedgerAccountId");

                    b.HasDiscriminator().HasValue("MemberAccountType");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.Teacher", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.Employee");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Customer", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.Organisation");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Supplier", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.Entities.Organisation");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("BankBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaxAgency")
                        .HasColumnType("tinyint(1)");

                    b.HasIndex("BankBranchId");

                    b.HasIndex("BankId");

                    b.HasDiscriminator().HasValue("Supplier");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.LoanProduct", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.SaccoEntities.MemberAccountType");

                    b.Property<string>("AccountNumberPrefix")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<bool>("AutoGenerateAccountNumbers")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanHaveMultiple")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("InterestAccountId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<decimal>("InterestRate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("InterestType")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int>("MaxAccountLength")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int>("MinConsecutiveContribution")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int>("NextAccountNumber")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int>("PenaltyAccountId")
                        .HasColumnType("int");

                    b.HasIndex("InterestAccountId");

                    b.HasIndex("PenaltyAccountId");

                    b.HasDiscriminator().HasValue("LoanProduct");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.SaccoFee", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.SaccoEntities.MemberAccountType");

                    b.Property<int>("SaccoFeesType")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("SaccoFee");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.SavingsItem", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.SaccoEntities.MemberAccountType");

                    b.Property<string>("AccountNumberPrefix")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<bool>("AutoGenerateAccountNumbers")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BeneficiaryName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<string>("BeneficiaryPhoneNo")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<bool>("CanHaveMultiple")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("InterestAccountId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<decimal>("InterestRate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("InterestType")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int>("MaxAccountLength")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int>("MinConsecutiveContribution")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int>("NextAccountNumber")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.HasIndex("InterestAccountId");

                    b.HasDiscriminator().HasValue("SavingsItem");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.SharesItem", b =>
                {
                    b.HasBaseType("SmartBooks.Domains.SaccoEntities.MemberAccountType");

                    b.HasDiscriminator().HasValue("SharesItem");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Address", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Bank", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.BankBranch", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Bank", "Bank")
                        .WithMany("BankBranches")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Bin", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Warehouse", "Warehouse")
                        .WithMany("Bins")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.BinCard", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Bin", "Bin")
                        .WithMany()
                        .HasForeignKey("BinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.InventoryItem", "InventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bin");

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Company", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Country", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Currency", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.CurrencyConversion", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.CustomerProject", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.FinancialYear", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Transaction", "ClosingJournal")
                        .WithMany()
                        .HasForeignKey("ClosingJournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartBooks.Domains.Entities.Transaction", "OpeningJournal")
                        .WithMany()
                        .HasForeignKey("OpeningJournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ClosingJournal");

                    b.Navigation("OpeningJournal");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.GeneralLedger", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.JournalDetail", "JournalDetail")
                        .WithMany()
                        .HasForeignKey("JournalDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.LedgerAccount", "LedgerAccount")
                        .WithMany()
                        .HasForeignKey("LedgerAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.TransactionDetail", null)
                        .WithMany("GeneralLedgers")
                        .HasForeignKey("TransactionDetailId");

                    b.Navigation("Journal");

                    b.Navigation("JournalDetail");

                    b.Navigation("LedgerAccount");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.InventoryLedger", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.BinCard", "BinCard")
                        .WithMany()
                        .HasForeignKey("BinCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.BinCard", null)
                        .WithMany("InventoryLedgers")
                        .HasForeignKey("BinCardId1");

                    b.HasOne("SmartBooks.Domains.Entities.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UnitofMeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BinCard");

                    b.Navigation("UnitofMeasure");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.JournalDetail", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartBooks.Domains.Entities.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartBooks.Domains.Entities.Journal", "Journal")
                        .WithMany("JournalDetails")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.LedgerAccount", "LedgerAccount")
                        .WithMany()
                        .HasForeignKey("LedgerAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("SubLedgerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartBooks.Domains.Entities.TaxRate", "TaxRate")
                        .WithMany()
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartBooks.Domains.Entities.TransactionDetail", "TransactionDetail")
                        .WithMany()
                        .HasForeignKey("TransactionDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartBooks.Domains.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BusinessUnit");

                    b.Navigation("CostCenter");

                    b.Navigation("Journal");

                    b.Navigation("LedgerAccount");

                    b.Navigation("Organisation");

                    b.Navigation("TaxRate");

                    b.Navigation("Transaction");

                    b.Navigation("TransactionDetail");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.LedgerAccount", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.LedgerAccount", "ParentAccount")
                        .WithMany("ChildAccounts")
                        .HasForeignKey("ParentAccountId");

                    b.HasOne("SmartBooks.Domains.Entities.TaxRate", "TaxRate")
                        .WithMany()
                        .HasForeignKey("TaxRateId");

                    b.Navigation("Currency");

                    b.Navigation("ParentAccount");

                    b.Navigation("TaxRate");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.LedgerEntry", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.LedgerAccount", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.LedgerAccount", "DebitAccount")
                        .WithMany()
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.JournalDetail", "JournalDetail")
                        .WithMany()
                        .HasForeignKey("JournalDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("Journal");

                    b.Navigation("JournalDetail");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.PaymentMethod", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.LedgerAccount", "LedgerAccount")
                        .WithMany()
                        .HasForeignKey("LedgerAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LedgerAccount");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.ReorderLevel", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Bin", "Bin")
                        .WithMany()
                        .HasForeignKey("BinId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartBooks.Domains.Entities.InventoryItem", "InventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UnitofMeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bin");

                    b.Navigation("InventoryItem");

                    b.Navigation("UnitofMeasure");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.SubLedgerBase", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.LedgerAccount", "LedgerAccount")
                        .WithMany()
                        .HasForeignKey("LedgerAccountId");

                    b.Navigation("Currency");

                    b.Navigation("LedgerAccount");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Tax", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.LedgerAccount", "PurchasesAccount")
                        .WithMany()
                        .HasForeignKey("PurchasesAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartBooks.Domains.Entities.LedgerAccount", "SalesAccount")
                        .WithMany()
                        .HasForeignKey("SalesAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartBooks.Domains.Entities.Supplier", "TaxAgency")
                        .WithMany()
                        .HasForeignKey("TaxAgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchasesAccount");

                    b.Navigation("SalesAccount");

                    b.Navigation("TaxAgency");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.TaxRate", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Tax", "Tax")
                        .WithMany("TaxRates")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.TransactionDetail", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartBooks.Domains.Entities.InventoryItem", "InventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItemId");

                    b.HasOne("SmartBooks.Domains.Entities.Transaction", "Transaction")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("InventoryItem");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.UomConversion", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.UnitofMeasure", "UnitofMeasureFrom")
                        .WithMany()
                        .HasForeignKey("UnitofMeasureFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.UnitofMeasure", "UnitofMeasureTo")
                        .WithMany()
                        .HasForeignKey("UnitofMeasureToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UnitofMeasureFrom");

                    b.Navigation("UnitofMeasureTo");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.MemberApproval", b =>
                {
                    b.HasOne("SmartBooks.Domains.SaccoEntities.Member", "Member")
                        .WithMany("MemberApprovals")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.MemberAttachment", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.SaccoEntities.Member", "Member")
                        .WithMany("MemberAttachments")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.NextOfKin", b =>
                {
                    b.HasOne("SmartBooks.Domains.SaccoEntities.Member", "Member")
                        .WithMany("NextOfKins")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.ClassRegister", b =>
                {
                    b.HasOne("SmartBooks.Domains.SchoolEntities.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.SchoolEntities.Teacher", "ClassTeacher")
                        .WithMany()
                        .HasForeignKey("ClassTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.SchoolEntities.SchoolTerm", "SchoolTerm")
                        .WithMany()
                        .HasForeignKey("SchoolTermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("ClassTeacher");

                    b.Navigation("SchoolTerm");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.ClassRegisterDetail", b =>
                {
                    b.HasOne("SmartBooks.Domains.SchoolEntities.ClassRegister", "ClassRegister")
                        .WithMany("ClassRegisterDetails")
                        .HasForeignKey("ClassRegisterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.SchoolEntities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassRegister");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.ClassRoom", b =>
                {
                    b.HasOne("SmartBooks.Domains.SchoolEntities.Block", "Block")
                        .WithMany("ClassRooms")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.SchoolEntities.Level", "Level")
                        .WithMany("ClassRooms")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.SchoolTerm", b =>
                {
                    b.HasOne("SmartBooks.Domains.SchoolEntities.SchoolYear", "SchoolYear")
                        .WithMany("SchoolTerms")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.OrganisationAddress", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Organisation", "Organisation")
                        .WithMany("OrganisationAddresses")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Organisation", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("SmartBooks.Domains.Entities.OrganisationAddress", "DefaultAddress")
                        .WithMany()
                        .HasForeignKey("DefaultAddressId");

                    b.HasOne("SmartBooks.Domains.Entities.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId");

                    b.Navigation("Category");

                    b.Navigation("DefaultAddress");

                    b.Navigation("PaymentTerm");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.Member", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.Address", "HomeAddress")
                        .WithMany()
                        .HasForeignKey("HomeAddressId");

                    b.HasOne("SmartBooks.Domains.Entities.Address", "PermanentAddress")
                        .WithMany()
                        .HasForeignKey("PermanentAddressId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("HomeAddress");

                    b.Navigation("PermanentAddress");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.Student", b =>
                {
                    b.HasOne("SmartBooks.Domains.SchoolEntities.Level", "JoinedLevel")
                        .WithMany()
                        .HasForeignKey("JoinedLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JoinedLevel");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.InventoryItem", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.InventoryCategory", "InventoryCategory")
                        .WithMany()
                        .HasForeignKey("InventoryCategoryId");

                    b.HasOne("SmartBooks.Domains.Entities.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UnitofMeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InventoryCategory");

                    b.Navigation("UnitofMeasure");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.MemberAccountType", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.LedgerAccount", "LedgerAccount")
                        .WithMany()
                        .HasForeignKey("LedgerAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LedgerAccount");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Supplier", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchId");

                    b.HasOne("SmartBooks.Domains.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");

                    b.Navigation("BankBranch");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.LoanProduct", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.LedgerAccount", "InterestAccount")
                        .WithMany()
                        .HasForeignKey("InterestAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartBooks.Domains.Entities.LedgerAccount", "PenaltyAccount")
                        .WithMany()
                        .HasForeignKey("PenaltyAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InterestAccount");

                    b.Navigation("PenaltyAccount");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.SavingsItem", b =>
                {
                    b.HasOne("SmartBooks.Domains.Entities.LedgerAccount", "InterestAccount")
                        .WithMany()
                        .HasForeignKey("InterestAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InterestAccount");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Bank", b =>
                {
                    b.Navigation("BankBranches");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.BinCard", b =>
                {
                    b.Navigation("InventoryLedgers");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Journal", b =>
                {
                    b.Navigation("JournalDetails");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.LedgerAccount", b =>
                {
                    b.Navigation("ChildAccounts");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Tax", b =>
                {
                    b.Navigation("TaxRates");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Transaction", b =>
                {
                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.TransactionDetail", b =>
                {
                    b.Navigation("GeneralLedgers");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Warehouse", b =>
                {
                    b.Navigation("Bins");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.Block", b =>
                {
                    b.Navigation("ClassRooms");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.ClassRegister", b =>
                {
                    b.Navigation("ClassRegisterDetails");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.Level", b =>
                {
                    b.Navigation("ClassRooms");
                });

            modelBuilder.Entity("SmartBooks.Domains.SchoolEntities.SchoolYear", b =>
                {
                    b.Navigation("SchoolTerms");
                });

            modelBuilder.Entity("SmartBooks.Domains.Entities.Organisation", b =>
                {
                    b.Navigation("OrganisationAddresses");
                });

            modelBuilder.Entity("SmartBooks.Domains.SaccoEntities.Member", b =>
                {
                    b.Navigation("MemberApprovals");

                    b.Navigation("MemberAttachments");

                    b.Navigation("NextOfKins");
                });
#pragma warning restore 612, 618
        }
    }
}
